name: test
on:
  push:
    branches:
      - master

jobs:
  deploy:
    environment: testingvariables
    env:
      SSH_HOST: ${{ vars.SSH_HOST }}
      SSH_USER: ${{ vars.REMOTE_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v3

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        # env:
        #   REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #   REPOSITORY: joc-user-dev
        #   IMAGE_TAG: ${{github.run_number}}
        #   CONTEXT: joc-user-ms
        run: |
          # chmod +x bin/npm-registry.sh
          # bin/npm-registry.sh
          # ls -la
          # mv .npmrc $CONTEXT/.npmrc

          # docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG $CONTEXT
          # docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          #echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"

          echo "::set-output name=image::httpd:latest"

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END

      - name: Deploy to EC2
        env:
          SERVICE_NAME: nginx
          IMAGE: ${{ steps.build-image.outputs.image }}
        run: |
          ssh ec2 bash -s <<EOF
          export SERVICE_NAME=$SERVICE_NAME
          export IMAGE=$IMAGE
          yq e -i ".services.$SERVICE_NAME.image=env(IMAGE)" docker-compose.yml
          cat docker-compose.yml
          docker-compose up -d
          EOF
